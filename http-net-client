<!DOCTYPE html>



  


<html class="theme-next muse use-motion" lang="zh-Hans">
<head>
  <meta charset="UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta name="theme-color" content="#222">









<meta http-equiv="Cache-Control" content="no-transform" />
<meta http-equiv="Cache-Control" content="no-siteapp" />
















  
  
  <link href="lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" />







<link href="lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" />

<link href="css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">


  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">





  <meta name="keywords" content="net,http," />










<meta name="description" content="大概记录一下golang里面的net/http包内client.go的文件，及其相关内容">
<meta name="keywords" content="net,http">
<meta property="og:type" content="article">
<meta property="og:title" content="golang package net&#x2F;http&#x2F;client">
<meta property="og:url" content="https://daihainidewo.github.io/http-net-client">
<meta property="og:site_name" content="dhainidewo blog">
<meta property="og:description" content="大概记录一下golang里面的net/http包内client.go的文件，及其相关内容">
<meta property="og:locale" content="zh-Hans">
<meta property="og:updated_time" content="2018-08-01T11:30:02.529Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="golang package net&#x2F;http&#x2F;client">
<meta name="twitter:description" content="大概记录一下golang里面的net/http包内client.go的文件，及其相关内容">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/blog/',
    scheme: 'Muse',
    version: '5.1.4',
    sidebar: {"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: '博主'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="https://daihainidewo.github.io/http-net-client"/>





  <title>golang package net/http/client | dhainidewo blog</title>
  








</head>

<body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">

  
  
    
  

  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/blog/"  class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">dhainidewo blog</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <p class="site-subtitle">note study problem</p>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-home"></i> <br />
            
            首页
          </a>
        </li>
      
        
        <li class="menu-item menu-item-archives">
          <a href="" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />
            
            归档
          </a>
        </li>
      

      
    </ul>
  

  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://daihainidewo.github.io">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="dhainidewo">
      <meta itemprop="description" content="">
      <meta itemprop="image" content="images/avatar.gif">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="dhainidewo blog">
    </span>

    
      <header class="post-header">

        
        
          <h1 class="post-title" itemprop="name headline">golang package net/http/client</h1>
        

        <div class="post-meta">
          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">发表于</span>
              
              <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-08-01T18:35:27+08:00">
                2018-08-01
              </time>
            

            

            
          </span>

          
            <span class="post-category" >
            
              <span class="post-meta-divider">|</span>
            
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              
                <span class="post-meta-item-text">分类于</span>
              
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="categories/golang/" itemprop="url" rel="index">
                    <span itemprop="name">golang</span>
                  </a>
                </span>

                
                
              
            </span>
          

          
            
          

          
          

          

          

          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">

      
      

      
        <p>大概记录一下golang里面的net/http包内client.go的文件，及其相关内容<br><a id="more"></a></p>
<h1 id="client"><a href="#client" class="headerlink" title="client"></a>client</h1><h2 id="Client-struct"><a href="#Client-struct" class="headerlink" title="Client struct"></a>Client struct</h2><p>Client 是一个HTTP client<br>Client Transport通常具有内部状态（缓存TCP连接），所以Client应该被重用而不是工具需求创建<br>Client 是协程安全的<br>Client 是比RoundTripper更高级，并处理HTTP的细节（cookie和redirect）<br>重定向后，Client将会转发初始请求的所有headers，除：</p>
<ul>
<li>headers具有敏感信息（Authorization，WWW-Authenticate，Cookie）传递给不受信任的目标。在重定向时不是子域匹配的域或初始域的完全匹配域时会被忽略</li>
<li>传递Cookie是Jar non-nil，由于每个重定向都有可能改变cookie jar，导致重定向cookie与初始请求cookie不一致，任何改变的cookie将会被忽略，并通过Jar将初始请求的cookie填充那些被忽略的cookie，如果Jar为nil，则初始cookie将不加更改地转发</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Transport 指定进行单个http请求的机制</span></span><br><span class="line">    <span class="comment">// 如果为空会使用默认的机制</span></span><br><span class="line">    Transport RoundTripper</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CheckRedirect 处理重定向的一种策略</span></span><br><span class="line">    <span class="comment">// 如果不为空，会在http重定向之前调用</span></span><br><span class="line">    <span class="comment">// req 表示即将发出的请求</span></span><br><span class="line">    <span class="comment">// via 表示已经发出的请求</span></span><br><span class="line">    <span class="comment">// 如果CheckRedirect返回error，Client的Get方法返回原先的响应（Body closed）</span></span><br><span class="line">    <span class="comment">// 并且CheckRedirect的error（会添加进url.Error里面）会替代req的issue</span></span><br><span class="line">    <span class="comment">// 特殊情况，如果CheckRedirect返回ErrUseLastResponse，则返回最近的响应（Body unclosed），和nil error</span></span><br><span class="line">    <span class="comment">// 如果CheckRedirect为nil，则使用默认策略，即10次连续请求后停止</span></span><br><span class="line">    CheckRedirect <span class="function"><span class="keyword">func</span><span class="params">(req *Request, via []*Request)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // <span class="title">Jar</span> 定义<span class="title">cookie</span> <span class="title">jar</span></span></span><br><span class="line"><span class="function">    // 对于每个请求都会添加<span class="title">Jar</span> <span class="title">cookie</span> <span class="title">value</span></span></span><br><span class="line"><span class="function">    // 对于每个响应都会修改更新<span class="title">Jar</span> <span class="title">cookie</span> <span class="title">value</span></span></span><br><span class="line"><span class="function">    // 对于每个重定向都会查询<span class="title">Jar</span></span></span><br><span class="line"><span class="function">    // 当<span class="title">Jar</span>为<span class="title">nil</span>时，只有在请求明确设置<span class="title">cookie</span>时才会发送<span class="title">cookie</span></span></span><br><span class="line"><span class="function">    <span class="title">Jar</span> <span class="title">CookieJar</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // <span class="title">Timeout</span> 对每个请求限制时间</span></span><br><span class="line"><span class="function">    // <span class="title">Timeout</span> 包括连接（任何重定向，读取响应）</span></span><br><span class="line"><span class="function">    // 在<span class="title">GET</span>、<span class="title">Head</span>、<span class="title">Post</span>、<span class="title">Do</span>返回后计时器人会运行，并可能会中断读取<span class="title">response</span>.<span class="title">Body</span></span></span><br><span class="line"><span class="function">    // <span class="title">Timeout</span> 为0，表示没有<span class="title">timeout</span></span></span><br><span class="line"><span class="function">    // <span class="title">Client</span>使用<span class="title">Request</span>.<span class="title">Cancel</span>机制取消对底层传输的请求</span></span><br><span class="line"><span class="function">    // 传递给<span class="title">Client</span>.<span class="title">Do</span>的请求仍可以设置<span class="title">Request</span>.<span class="title">Cancel</span>;,两者都会取消请求</span></span><br><span class="line"><span class="function">    // 为了兼容性，如果发现<span class="title">Transport</span>使用<span class="title">CancelRequest</span>方法，<span class="title">Client</span>则会忽略（弃用）</span></span><br><span class="line"><span class="function">    // 可以实现<span class="title">RoundTripper</span>的<span class="title">Request</span>.<span class="title">Cancel</span>方法来代替实现<span class="title">CancelRequest</span></span></span><br><span class="line"><span class="function">    <span class="title">Timeout</span> <span class="title">time</span>.<span class="title">Duration</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Client-Method"><a href="#Client-Method" class="headerlink" title="Client Method"></a>Client Method</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">send</span><span class="params">(req *Request, deadline time.Time)</span> <span class="params">(resp *Response, didTimeout <span class="keyword">func</span>()</span> <span class="title">bool</span>, <span class="title">err</span> <span class="title">error</span>)</span></span><br></pre></td></tr></table></figure>
<p>send 发送请求，返回响应。send总是关闭req.Body</p>
<ol>
<li>如果c.Jar不为nil，req填充c.Jar</li>
<li>利用req发送请求，获取resp</li>
<li>如果c.Jar不为nil，c.Jar填充resp.Cookies</li>
</ol>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">deadline</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span></span><br></pre></td></tr></table></figure>
<p>deadline 返回Client的deadline，如果c.Timeout大于0，返回当前时间加上c.Timeout，否则返回time.Time{}<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">transport</span><span class="params">()</span> <span class="title">RoundTripper</span></span></span><br></pre></td></tr></table></figure></p>
<p>transport 返回Client的RoundTripper，c.Transport为nil，返回DefaultTransport<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Get</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Get 对url发起GET请求<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">checkRedirect</span><span class="params">(req *Request, via []*Request)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure></p>
<p>checkRedirect 返回Client.CheckRedirect的执行结果，如果c.CheckRedirect为空，则返回defaultCheckRedirect的执行结果<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Do</span><span class="params">(req *Request)</span> <span class="params">(*Response, error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Do 发送一个HTTP请求并返回一个HTTP响应</p>
<ol>
<li>判断req.URL是否为空，为空返回error</li>
<li>通过c.send()获取请求的resp</li>
<li>使用redirectBehavior()判断是否需要重定向</li>
<li>如果不需要重定向，则返回resp</li>
<li>获取req.Header中的“Location”</li>
<li>将其解析成URL struct</li>
<li>拼成Request struct</li>
<li>保存当前req的header</li>
<li>将当前req.URL转换为referer，并添加进req.Header中</li>
<li>调用c.checkRedirect()，如果返回ErrUseLastResponse，则直接返回resp和nil</li>
<li>如果resp.ContentLength == -1 或者 resp.ContentLength &lt;= 2 &lt;&lt; 10，就将resp.Body直接丢掉</li>
<li>如果c.checkRedirect()返回其他错误，直接返回当前resp和错误信息</li>
</ol>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">makeHeadersCopier</span><span class="params">(ireq *Request)</span> <span class="title">func</span><span class="params">(*Request)</span></span></span><br></pre></td></tr></table></figure>
<p>makeHeadersCopier 创建一个复制初始请求Header的函数。对于每一个重定向，该函数必须调用，因此它可以将Header复制到新的请求中<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Post</span><span class="params">(url <span class="keyword">string</span>, contentType <span class="keyword">string</span>, body io.Reader)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Post 利用post请求相应的数据，调用者读取完数据后必须resp.Body.Close()，如果body是io.Closer则在请求后关闭<br>如果需要添加其他的header，需要使用NewRequest和Client.Do<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">PostForm</span><span class="params">(url <span class="keyword">string</span>, data url.Values)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>PostForm 对指定的url和参数对进行POST请求，默认设置Header ContentType为 application/x-www-form-urlencoded<br>如果需要添加其他的header，需要使用NewRequest和Client.Do<br>如果err为nil，则resp总是non-nil resp.Body，调用者需要在读取数据后关闭resp.Body<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Head</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Head 利用head请求指定url<br>如果响应的是以下状态码，则Head会跟随重定向：</p>
<ol>
<li>301 (Moved Permanently)  </li>
<li>302 (Found)  </li>
<li>303 (See Other)  </li>
<li>307 (Temporary Redirect)  </li>
<li>308 (Permanent Redirect)</li>
</ol>
<h1 id="RoundTripper-interface"><a href="#RoundTripper-interface" class="headerlink" title="RoundTripper interface"></a>RoundTripper interface</h1><p>RoundTripper 定义执行单个HTTP事务，实现必须是协程安全的<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RoundTripper <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// RoundTrip 执行单个HTTP事务，为request返回response</span></span><br><span class="line">    <span class="comment">// RoundTrip 没有试着去解释这个响应，当它获得一个响应时会返回err==nil，不管这个响应的返回码是什么</span></span><br><span class="line">    <span class="comment">// 一个包含错误响应的err是non-nil的</span></span><br><span class="line">    <span class="comment">// RoundTrip 也没有试着去处理高层协议细节，例如：redirects,authentication,cookies</span></span><br><span class="line">    <span class="comment">// 除了使用和关闭Request的Body之外，RoundTrip不应该修改请求</span></span><br><span class="line">    <span class="comment">// RoundTrip 会分离一个goroutine去处理read fields</span></span><br><span class="line">    <span class="comment">// 在Response Body未关闭之前，调用者不能修改请求</span></span><br><span class="line">    <span class="comment">// RoundTrip 总是要关闭body和error，但是可能会是异步执行，所以调用者如果想重用调用主体则必须等待Close之后调用</span></span><br><span class="line">    <span class="comment">// Request的URL和Header必须初始化</span></span><br><span class="line">    RoundTrip(*Request) (*Response, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="cancelTimerBody-struct"><a href="#cancelTimerBody-struct" class="headerlink" title="cancelTimerBody struct"></a>cancelTimerBody struct</h1><h2 id="cancelTimerBody-struct-1"><a href="#cancelTimerBody-struct-1" class="headerlink" title="cancelTimerBody struct"></a>cancelTimerBody struct</h2><p>cancelTimerBody 是一个io.ReadCloser接口的实现，具有：</p>
<ul>
<li>当读错误或者关闭，stop()会被调用</li>
<li>当读失败，如果reqDidTimeout为真，则会将错误封装进net.Error提示达到timeout</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> cancelTimerBody <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// stop 停止time.Timer等待取消请求</span></span><br><span class="line">    stop          <span class="function"><span class="keyword">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="title">rc</span>            <span class="title">io</span>.<span class="title">ReadCloser</span></span></span><br><span class="line"><span class="function">    <span class="title">reqDidTimeout</span> <span class="title">func</span><span class="params">()</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="cancelTimerBody-method"><a href="#cancelTimerBody-method" class="headerlink" title="cancelTimerBody method"></a>cancelTimerBody method</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *cancelTimerBody)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>
<p>Read 从b.rc中读取n个byte存放进p</p>
<ol>
<li>如果err为nil直接返回</li>
<li>如果err不为nil，会执行b.stop()，如果err==io.EOF直接返回</li>
<li>判断b.reqDidTimeout()为真，封装成httpError错误</li>
<li>返回读取字节数和错误</li>
</ol>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *cancelTimerBody)</span> <span class="title">Close</span><span class="params">()</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>
<p>Close 关闭b，调用b.rc.Close()和b.stop()</p>
<h1 id="client-function"><a href="#client-function" class="headerlink" title="client function"></a>client function</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">refererForURL</span><span class="params">(lastReq, newReq *url.URL)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure>
<p>refererForURL 将lastReq转换成header中Referer的值</p>
<ol>
<li>如果lastReq.Scheme为https，但newReq.Scheme为http，直接返回空字符串</li>
<li>将lastReq生成字符串referer</li>
<li>如果lastReq.User不为nil，则去掉referer中user字段</li>
<li>返回referer</li>
</ol>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(ireq *Request, rt RoundTripper, deadline time.Time)</span> <span class="params">(resp *Response, didTimeout <span class="keyword">func</span>()</span> <span class="title">bool</span>, <span class="title">err</span> <span class="title">error</span>)</span></span><br></pre></td></tr></table></figure>
<p>send 发送一个http请求，调用者需要在读完后调用resp.Body.Close()<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setRequestCancel</span><span class="params">(req *Request, rt RoundTripper, deadline time.Time)</span> <span class="params">(stopTimer <span class="keyword">func</span>()</span>, <span class="title">didTimeout</span> <span class="title">func</span><span class="params">()</span> <span class="title">bool</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>setRequestCancel 如果deadline为non-zero，则为req设置Cancel<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">basicAuth</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure></p>
<p>basicAuth 将username和password合并，并使用base64转换，但并不保证结果是已url编码的<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Get 使用默认客户端调用Get()<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alwaysFalse</span><span class="params">()</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure></p>
<p>alwaysFalse 返回false<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">redirectBehavior</span><span class="params">(reqMethod <span class="keyword">string</span>, resp *Response, ireq *Request)</span> <span class="params">(redirectMethod <span class="keyword">string</span>, shouldRedirect, includeBody <span class="keyword">bool</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>redirectBehavior 描述当状态码为3xx时的操作</p>
<ol>
<li>301,302,303：只保留GET和HEAD方法，需要重定向，不需要includeBody</li>
<li>307,308：<ul>
<li>如果resp.Header中包含Location为空字符串，则重定向方法为当前请求方法，不需要重定向，需要includeBody</li>
<li>如果ireq.GetBody为nil并且ireq.ContentLength不为0，则重定向方法为当前请求方法，不需要重定向，需要includeBody</li>
<li>其他情况重定向方法为当前请求方法，需要重定向，需要includeBody<br>返回重定向方法，是否重定向，是否需要body</li>
</ul>
</li>
</ol>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defaultCheckRedirect</span><span class="params">(req *Request, via []*Request)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>
<p>defaultCheckRedirect 默认检查重定向机制，如果重定向了10次则返回<code>errors.New(&quot;stopped after 10 redirects&quot;)</code><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Post</span><span class="params">(url <span class="keyword">string</span>, contentType <span class="keyword">string</span>, body io.Reader)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Post 使用默认客户端调用Post()<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PostForm</span><span class="params">(url <span class="keyword">string</span>, data url.Values)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>PostForm 使用默认客户端调用PostForm()<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Head</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p>
<p>Head 使用默认客户端调用Head()<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shouldCopyHeaderOnRedirect</span><span class="params">(headerKey <span class="keyword">string</span>, initial, dest *url.URL)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure></p>
<p>shouldCopyHeaderOnRedirect 当headerkey为”Authorization”, “Www-Authenticate”, “Cookie”, “Cookie2”之一时回去判断dest.Addr是initial.Addr的子域<br>如果不为上述情况直接返回true<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDomainOrSubdomain</span><span class="params">(sub, parent <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure></p>
<p>isDomainOrSubdomain 返回sub是否是parent的子域或者完全匹配，两个域名必须是规范形式</p>

      
    </div>
    
    
    

    

    

    

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="tags/net/" rel="tag"># net</a>
          
            <a href="tags/http/" rel="tag"># http</a>
          
        </div>
      

      
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="builtin" rel="next" title="golang builtin 注释详解">
                <i class="fa fa-chevron-left"></i> golang builtin 注释详解
              </a>
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="net-http-cookie" rel="prev" title="net-http-cookie">
                net-http-cookie <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          

  



        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            文章目录
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            站点概览
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <p class="site-author-name" itemprop="name">dhainidewo</p>
              <p class="site-description motion-element" itemprop="description"></p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/archives/">
              
                  <span class="site-state-item-count">8</span>
                  <span class="site-state-item-name">日志</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="categories/index.html">
                  <span class="site-state-item-count">2</span>
                  <span class="site-state-item-name">分类</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="tags/index.html">
                  <span class="site-state-item-count">4</span>
                  <span class="site-state-item-name">标签</span>
                </a>
              </div>
            

          </nav>

          

          
            <div class="links-of-author motion-element">
                
                  <span class="links-of-author-item">
                    <a href="https://github.com/daihainidewo" target="_blank" title="GitHub">
                      
                        <i class="fa fa-fw fa-globe"></i>GitHub</a>
                  </span>
                
            </div>
          

          
          

          
          

          

        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#client"><span class="nav-number">1.</span> <span class="nav-text">client</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Client-struct"><span class="nav-number">1.1.</span> <span class="nav-text">Client struct</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Client-Method"><span class="nav-number">1.2.</span> <span class="nav-text">Client Method</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#RoundTripper-interface"><span class="nav-number">2.</span> <span class="nav-text">RoundTripper interface</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#cancelTimerBody-struct"><span class="nav-number">3.</span> <span class="nav-text">cancelTimerBody struct</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#cancelTimerBody-struct-1"><span class="nav-number">3.1.</span> <span class="nav-text">cancelTimerBody struct</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#cancelTimerBody-method"><span class="nav-number">3.2.</span> <span class="nav-text">cancelTimerBody method</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#client-function"><span class="nav-number">4.</span> <span class="nav-text">client function</span></a></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <div class="copyright">&copy; <span itemprop="copyrightYear">2018</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">dhainidewo</span>

  
</div>


  <div class="powered-by">由 <a class="theme-link" target="_blank" href="https://hexo.io">Hexo</a> 强力驱动</div>



  <span class="post-meta-divider">|</span>



  <div class="theme-info">主题 &mdash; <a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next">NexT.Muse</a> v5.1.4</div>




        







        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
      </div>
    

    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  












  
  
    <script type="text/javascript" src="lib/jquery/index.js?v=2.1.3"></script>
  

  
  
    <script type="text/javascript" src="lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>
  

  
  
    <script type="text/javascript" src="lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>
  

  
  
    <script type="text/javascript" src="lib/velocity/velocity.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="lib/velocity/velocity.ui.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>
  


  


  <script type="text/javascript" src="js/src/utils.js?v=5.1.4"></script>

  <script type="text/javascript" src="js/src/motion.js?v=5.1.4"></script>



  
  

  
  <script type="text/javascript" src="js/src/scrollspy.js?v=5.1.4"></script>
<script type="text/javascript" src="js/src/post-details.js?v=5.1.4"></script>



  


  <script type="text/javascript" src="js/src/bootstrap.js?v=5.1.4"></script>



  


  




	





  





  












  





  

  

  

  
  

  

  

  

</body>
</html>
